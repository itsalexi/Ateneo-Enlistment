name: Update AISIS Courses
on:
    schedule:
        - cron: '0 */8 * * *' # Run every 8 hours
    workflow_dispatch:
        inputs:
            period:
                description: 'Applicable Period (e.g., 2024-2)'
                required: false
                type: string
            force_run:
                description: 'Force run even if disabled'
                required: false
                type: boolean
                default: false
jobs:
    update-courses:
        runs-on: ubuntu-latest

        steps:
            - name: Check if workflow is disabled
              run: |
                  if [ "${{ vars.WORKFLOW_DISABLED }}" = "true" ] && [ "${{ inputs.force_run }}" != "true" ]; then
                    echo "Workflow is disabled. Set WORKFLOW_DISABLED repository variable to false to enable, or use force_run option."
                    exit 0
                  fi
                  echo "Workflow is enabled, proceeding..."

            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.PAT_TOKEN }} # Use PAT for checkout

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.x'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install requests beautifulsoup4

            - name: Setup gitignore
              run: |
                  echo "cookies.pkl" >> .gitignore

            - name: Create empty cookies file
              run: |
                  python -c "import pickle; pickle.dump({}, open('cookies.pkl', 'wb'))"

            - name: Check secrets and variables
              run: |
                  if [ -z "${{ secrets.AISIS_USERNAME }}" ]; then
                    echo "Error: AISIS_USERNAME secret is not set"
                    exit 1
                  fi
                  if [ -z "${{ secrets.AISIS_PASSWORD }}" ]; then
                    echo "Error: AISIS_PASSWORD secret is not set"
                    exit 1
                  fi
                  if [ -z "${{ vars.APPLICABLE_PERIOD }}" ]; then
                    echo "Error: APPLICABLE_PERIOD variable is not set"
                    exit 1
                  fi
                  echo "Secrets and variables are properly configured"

            - name: Set applicable period
              id: set_period
              run: |
                  if [ ! -z "${{ inputs.period }}" ]; then
                    PERIOD="${{ inputs.period }}"
                  else
                    PERIOD="${{ vars.APPLICABLE_PERIOD }}"
                  fi
                  echo "period=$PERIOD" >> $GITHUB_OUTPUT
                  echo "Using period: $PERIOD"

            - name: Determine semester string
              id: set_semester
              run: |
                  PERIOD="${{ steps.set_period.outputs.period }}"
                  echo "Processing period: $PERIOD"

                  # Extract year and suffix
                  YEAR=${PERIOD%%-*}
                  SUFFIX=${PERIOD##*-}

                  NEXT_YEAR=$((YEAR+1))

                  echo "Year: $YEAR, Suffix: $SUFFIX, Next year: $NEXT_YEAR"

                  if [ "$SUFFIX" = "0" ]; then
                    SEMESTER_STRING="Intersession ${YEAR}-${NEXT_YEAR}"
                  elif [ "$SUFFIX" = "1" ]; then
                    SEMESTER_STRING="First Semester ${YEAR}-${NEXT_YEAR}"
                  elif [ "$SUFFIX" = "2" ]; then
                    SEMESTER_STRING="Second Semester ${YEAR}-${NEXT_YEAR}"
                  else
                    echo "Unknown period suffix: $SUFFIX, using default"
                    SEMESTER_STRING="Unknown Semester"
                  fi

                  echo "semester_string=$SEMESTER_STRING" >> $GITHUB_OUTPUT
                  echo "Determined semester string: $SEMESTER_STRING"

            - name: Run AISIS scraper
              id: scraper
              env:
                  AISIS_USERNAME: ${{ secrets.AISIS_USERNAME }}
                  AISIS_PASSWORD: ${{ secrets.AISIS_PASSWORD }}
                  APPLICABLE_PERIOD: ${{ steps.set_period.outputs.period }}
              run: |
                  echo "Running scraper with configured credentials for period $APPLICABLE_PERIOD"
                  python aisis_scraper.py
                  if [ -f "data/courses.json" ] && [ -s "data/courses.json" ]; then
                    echo "scraper_success=true" >> $GITHUB_OUTPUT
                  else
                    echo "scraper_success=false" >> $GITHUB_OUTPUT
                    exit 1
                  fi

            - name: Update timestamps and semester string
              if: steps.scraper.outputs.scraper_success == 'true'
              id: update_info
              run: |
                  TIMESTAMP=$(python -c "import time; print(int(time.time() * 1000))")
                  SEMESTER_STRING="${{ steps.set_semester.outputs.semester_string }}"

                  echo "Updating timestamp to: $TIMESTAMP"
                  echo "Updating semester string to: $SEMESTER_STRING"

                  # Update timestamp
                  sed -i "s/const lastUpdated = [0-9]\+;/const lastUpdated = $TIMESTAMP;/" app/page.js

                  # Update semester string - escape single quotes for sed
                  SEMESTER_STRING_ESCAPED=$(echo "$SEMESTER_STRING" | sed "s/'/\\\\'/g")
                  sed -i "s/const currentSemesterString = '[^']*';/const currentSemesterString = '$SEMESTER_STRING_ESCAPED';/" app/page.js

                  echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
                  echo "semester_string=$SEMESTER_STRING" >> $GITHUB_OUTPUT

            - name: Clean up before commit
              run: |
                  rm -f cookies.pkl

            - name: Check for changes
              if: steps.scraper.outputs.scraper_success == 'true'
              id: check_changes
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'

                  if git diff --quiet; then
                    echo "No changes detected"
                    echo "has_changes=false" >> $GITHUB_OUTPUT
                  else
                    echo "Changes detected"
                    echo "has_changes=true" >> $GITHUB_OUTPUT
                  fi

            - name: Commit and push changes
              if: steps.scraper.outputs.scraper_success == 'true' && steps.check_changes.outputs.has_changes == 'true'
              run: |
                  git add data/courses.json app/page.js
                  git commit -m "🔄 Auto-update courses for period ${{ steps.set_period.outputs.period }}

                  - Updated course listings in data/courses.json
                  - Updated lastUpdated timestamp to ${{ steps.update_info.outputs.timestamp }}
                  - Updated semester string to '${{ steps.update_info.outputs.semester_string }}'"

                  git push origin main

            - name: Summary
              if: steps.scraper.outputs.scraper_success == 'true'
              run: |
                  if [ "${{ steps.check_changes.outputs.has_changes }}" = "true" ]; then
                    echo "✅ Successfully updated and pushed course data for period ${{ steps.set_period.outputs.period }}"
                  else
                    echo "ℹ️ No changes detected, skipping commit"
                  fi
